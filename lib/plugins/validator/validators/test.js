// Generated by CoffeeScript 1.6.2
(function() {
  var TestValidator,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TestValidator = (function(_super) {
    __extends(TestValidator, _super);

    /*
    */


    function TestValidator(options) {
      TestValidator.__super__.constructor.call(this, options);
      this._test = this._getTester(options.test);
    }

    /*
    */


    TestValidator.prototype.test = function(model, next) {
      var onTest, value,
        _this = this;

      value = model.get(this.field.path);
      if (value == null) {
        return next();
      }
      onTest = function(err) {
        if (err) {
          return _this._error("" + _this.field.path + " is invalid", next);
        } else {
          return next();
        }
      };
      return this._test(String(value), onTest);
    };

    /*
    */


    TestValidator.prototype._getTester = function(tester) {
      var _this = this;

      if (tester.test) {
        return function(value, next) {
          if (tester.test(value)) {
            return next(false);
          }
          return next(true);
        };
      }
      if (tester.length === 2) {
        return tester;
      } else {
        return function(value, next) {
          var e;

          try {
            return next(!tester(value));
          } catch (_error) {
            e = _error;
            return next(false);
          }
        };
      }
    };

    /*
    */


    TestValidator.test = function(options) {
      return !!options.test;
    };

    return TestValidator;

  })(require("./base"));

  module.exports = TestValidator;

}).call(this);
