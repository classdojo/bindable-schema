// Generated by CoffeeScript 1.6.2
(function() {
  var Validator, bindable, decor, toarray, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  decor = require("./decor");

  bindable = require("bindable");

  toarray = require("toarray");

  Validator = (function(_super) {
    __extends(Validator, _super);

    function Validator() {
      _ref = Validator.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    Validator.prototype.schema = function(schema) {
      var _this = this;

      return schema.validate = function(model, next) {
        var _ref1;

        return (_ref1 = schema.root).validate.apply(_ref1, arguments);
      };
    };

    /*
    */


    Validator.prototype.field = function(field) {
      field._validatorFactory = decor;
      field._validator = decor.create(field.options);
      return field.validate = function(model, next) {
        return field._validator.test(model, next);
      };
    };

    /*
    */


    Validator.prototype.watch = function(model, watcher, field) {
      var errors, pending, prop, validate, _i, _len, _ref1;

      if (!field.parent) {
        watcher.set("$errors", new bindable.Collection());
        watcher.set("$pending", new bindable.Collection());
        return;
      }
      errors = watcher.get("$errors");
      pending = watcher.get("$pending");
      validate = function() {
        var i, pendingIndex;

        if (field.fields.length) {
          return;
        }
        watcher.set(field.path + ".$validating", false);
        watcher.set(field.path + ".$validated", false);
        watcher.set(field.path + ".$pending", true);
        watcher.set(field.path + ".$valid", false);
        if (!~(pendingIndex = pending.searchIndex({
          _id: field._id
        }))) {
          pendingIndex = pending.length;
          pending.push(field);
        }
        if (~(i = errors.searchIndex({
          _id: field.path
        }))) {
          errors.splice(i, 1);
        }
        watcher.set("$valid", !pending.length);
        if (field.options.required && (model.get(field.path) == null)) {
          return;
        }
        watcher.set(field.path + ".$validating", true);
        return field.validate(model, function(err) {
          watcher.set(field.path + ".$validating", false);
          watcher.set(field.path + ".$validated", true);
          watcher.set(field.path + ".$pending", false);
          watcher.set(field.path + ".$valid", !err);
          if (err) {
            err._id = field.path;
            errors.push(err);
          } else if (~(pendingIndex = pending.searchIndex({
            _id: field._id
          }))) {
            pending.splice(pendingIndex, 1);
          }
          watcher.set(field.path + ".$error", err);
          return watcher.set("$valid", !pending.length);
        });
      };
      _ref1 = toarray(field.options.bind || field.path);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        prop = _ref1[_i];
        model.bind(prop).to(validate);
      }
      return validate();
    };

    /*
    */


    Validator.prototype.model = function(model) {
      var _this = this;

      return model.validate = function(next) {
        return model.schema.validate(model, next);
      };
    };

    return Validator;

  })(require("../base"));

  module.exports = function(schema) {
    return new Validator(schema);
  };

}).call(this);
